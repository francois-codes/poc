// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"encoding/json"
)

const createDatamodel = `-- name: CreateDatamodel :one
INSERT INTO datamodel (name)
VALUES ($1)
    RETURNING id, name
`

func (q *Queries) CreateDatamodel(ctx context.Context, name string) (Datamodel, error) {
	row := q.db.QueryRowContext(ctx, createDatamodel, name)
	var i Datamodel
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteDatamodel = `-- name: DeleteDatamodel :exec
DELETE FROM datamodel
WHERE id = $1
`

func (q *Queries) DeleteDatamodel(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDatamodel, id)
	return err
}

const getDatamodel = `-- name: GetDatamodel :one
SELECT json
FROM version
WHERE object_id = 123 AND object_type = 'datamodel'
ORDER BY version DESC
LIMIT 1
`

func (q *Queries) GetDatamodel(ctx context.Context) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getDatamodel)
	var json json.RawMessage
	err := row.Scan(&json)
	return json, err
}

const listDatamodels = `-- name: ListDatamodels :many
SELECT id, name
FROM datamodel
ORDER BY id
`

func (q *Queries) ListDatamodels(ctx context.Context) ([]Datamodel, error) {
	rows, err := q.db.QueryContext(ctx, listDatamodels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Datamodel
	for rows.Next() {
		var i Datamodel
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDatamodel = `-- name: UpdateDatamodel :one
UPDATE datamodel
SET name = $2
WHERE id = $1
    RETURNING id, name
`

type UpdateDatamodelParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateDatamodel(ctx context.Context, arg UpdateDatamodelParams) (Datamodel, error) {
	row := q.db.QueryRowContext(ctx, updateDatamodel, arg.ID, arg.Name)
	var i Datamodel
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
